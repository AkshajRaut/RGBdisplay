// This is how many color levels the display shows - the more the slower the update
//#define PxMATRIX_COLOR_DEPTH 8

// Defines the buffer height / the maximum height of the matrix
//#define PxMATRIX_MAX_HEIGHT 64

// Defines the buffer width / the maximum width of the matrix
//#define PxMATRIX_MAX_WIDTH 64

// Defines how long we display things by default
//#define PxMATRIX_DEFAULT_SHOWTIME 30

// Defines the speed of the SPI bus (reducing this may help if you experience noisy images)
//#define PxMATRIX_SPI_FREQUENCY 20000000

// Creates a second buffer for backround drawing (doubles the required RAM)
//#define PxMATRIX_double_buffer true

#include <PxMatrix.h>

// Pins for LED MATRIX
#ifdef ESP32

#define P_LAT 22
#define P_A 19
#define P_B 23
#define P_C 18
#define P_D 5
#define P_E 15
#define P_OE 16
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

#endif

#ifdef ESP8266

#include <Ticker.h>
Ticker display_ticker;
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

#endif

#define matrix_width 64
#define matrix_height 64

// This defines the 'on' time of the display is us. The larger this number,
// the brighter the display. If too large the ESP will crash
uint8_t display_draw_time=60; //30-70 is usually fine

//PxMATRIX display(32,16,P_LAT, P_OE,P_A,P_B,P_C);
//PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);
PxMATRIX display(64,64,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};

uint8_t static weather_icons[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00
  ,0x00,0x20,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x07,0xdf,0x07,0xdf,0x07,0xff,0xff,0xe0,0xff,0xe0,0x00,0x00
  ,0x00,0x00,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0xff,0xe0,0x00,0x20,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0xff,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x07,0xff,0x00,0x20,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00
  ,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xdf,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

uint16_t static Insta_logo[] = {
0x0000, 0x0000, 0x4B78, 0x4B19, 0x52D9, 0x5279, 0x5A59, 0x6219, 0x69F9, 0x71D9, 0x81B8, 0x89B9, 0x91B8, 0x99B9, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x3B59, 0x4359, 0x4218, 0x4998, 0x61D8, 0x69D9, 0x71B9, 0x7998, 0x8178, 0x8938, 0x8897, 0x90D7, 0xA1B8, 0xA997, 0x0000,   // 0x0020 (32) pixels
0x6317, 0x52F9, 0x5157, 0x8319, 0xDEBE, 0xEF3F, 0xEF5F, 0xEF5F, 0xEF5F, 0xF73F, 0xEF1F, 0xE65E, 0xBA78, 0xA075, 0xB9B7, 0xC1D8,   // 0x0030 (48) pixels
0x7258, 0x6957, 0x92D9, 0xFFFF, 0xE61D, 0xC41A, 0xC3F9, 0xCBB9, 0xCB99, 0xD41A, 0xD399, 0xED7B, 0xFFFF, 0xCA97, 0xB8F4, 0xC9D5,   // 0x0040 (64) pixels
0x89D7, 0x80B4, 0xF6FE, 0xEE7D, 0x8812, 0x9852, 0xA010, 0xB133, 0xB933, 0xA80E, 0xD3F9, 0xDCDB, 0xEDDB, 0xFEFD, 0xC0B3, 0xC9B5,   // 0x0050 (80) pixels
0xA994, 0xB153, 0xFF7E, 0xDC37, 0xB86E, 0xC94F, 0xEDBA, 0xFFBF, 0xFFBF, 0xED18, 0xEC55, 0xE437, 0xDBD7, 0xFF7F, 0xC154, 0xC195,   // 0x0060 (96) pixels
0xC9B0, 0xD1AF, 0xFF5E, 0xEC54, 0xD867, 0xFE39, 0xFFFF, 0xEB0F, 0xEB10, 0xFFFF, 0xED59, 0xC00A, 0xE457, 0xFF5E, 0xC994, 0xC195,   // 0x0070 (112) pixels
0xEA0C, 0xEA2B, 0xFF7D, 0xFC31, 0xF209, 0xFFFF, 0xF36F, 0xE8E7, 0xE0C8, 0xEB50, 0xFFFF, 0xD9AE, 0xE3F5, 0xFF5E, 0xC9B2, 0xC194,   // 0x0080 (128) pixels
0xF249, 0xFA48, 0xFF7D, 0xFC2F, 0xFA07, 0xFFFF, 0xFB8D, 0xF104, 0xE8E5, 0xF36F, 0xFFFF, 0xE1CD, 0xEBF4, 0xFF5E, 0xD1B1, 0xC993,   // 0x0090 (144) pixels
0xFA48, 0xFA47, 0xFF7D, 0xFCB0, 0xF900, 0xFE58, 0xFFFF, 0xFB4B, 0xFB4D, 0xFFFF, 0xFE39, 0xE067, 0xEC54, 0xFF5E, 0xD1D0, 0xD1B2,   // 0x00A0 (160) pixels
0xFA87, 0xFA86, 0xFF9D, 0xFD51, 0xFA42, 0xFAC5, 0xFE36, 0xFFDE, 0xFFBE, 0xFDF7, 0xF1E8, 0xE8E7, 0xF494, 0xFF7E, 0xD9AF, 0xD1D1,   // 0x00B0 (176) pixels
0xFB27, 0xFAE4, 0xFF3C, 0xFF1A, 0xFB42, 0xFB43, 0xFA81, 0xFB46, 0xFAA6, 0xF900, 0xF923, 0xE8C4, 0xFEBB, 0xFF1D, 0xD90C, 0xD9F1,   // 0x00C0 (192) pixels
0xFBA8, 0xFBC6, 0xFD0C, 0xFFFF, 0xFEF9, 0xFDD1, 0xFDB1, 0xFD2F, 0xFCCF, 0xFCB0, 0xFC91, 0xFE79, 0xFFFF, 0xEB0F, 0xE16C, 0xDA10,   // 0x00D0 (208) pixels
0xFC67, 0xFCC9, 0xFCA5, 0xFDCC, 0xFF9A, 0xFFDD, 0xFFDD, 0xFFBD, 0xFFBD, 0xFF9D, 0xFF5C, 0xFEBA, 0xF32D, 0xE969, 0xE22E, 0xD9F0,   // 0x00E0 (224) pixels
0x0000, 0xFD29, 0xFDEA, 0xFDE7, 0xFDE6, 0xFDC8, 0xFD68, 0xFCE8, 0xFC48, 0xFB87, 0xFA85, 0xF9A4, 0xF1C7, 0xEA6C, 0xE24E, 0x0000,   // 0x00F0 (240) pixels
0x0000, 0x0000, 0xFE69, 0xFEEA, 0xFEEA, 0xFEA9, 0xFE09, 0xFD48, 0xFCA8, 0xFBE8, 0xFB27, 0xFA87, 0xF269, 0xEA2B, 0x0000, 0x0000,   // 0x0100 (256) pixels
};


uint16_t static Insta_logox[]  = {
  0x0000, 0x0000, 0x6BFB, 0x531A, 0x52F9, 0x5AB9, 0x5A99, 0x6278, 0x6A78, 0x7258, 0x7A17, 0x81F8, 0x8A18, 0x598E, 0x0000, 0x0000,   // 0x0010 (16) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0x0000, 0x49B5, 0x51D7, 0x5197, 0x61D7, 0x7237, 0x8257, 0x8A57, 0x9217, 0x9A16, 0x99D6, 0x9935, 0x90D4, 0x9136, 0x9176, 0x0000,   // 0x0050 (80) pixels
  0x0000, 0x59D6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1021, 0x0000, 0x0000, 0x0000, 0x0000, 0x914A,   // 0x0060 (96) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0820, 0x0800, 0x0000, 0x0000, 0x0000,   // 0x0070 (112) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0820, 0x0020, 0x0000, 0x0000, 0x0000,   // 0x0080 (128) pixels
  0x8279, 0x6956, 0x6935, 0xCD7C, 0xFFDF, 0xF7BF, 0xFFDF, 0xFFBF, 0xFFBF, 0xFF7E, 0xFFDF, 0xFFBE, 0xCC19, 0xA0F4, 0xA115, 0xAA36,   // 0x0090 (144) pixels
  0x0000, 0x61D6, 0x0000, 0x0822, 0x71B4, 0x8193, 0x8972, 0x9172, 0x0000, 0x0000, 0xA96F, 0xA96E, 0xB18F, 0xB18E, 0x0800, 0xB9AD,   // 0x00A0 (160) pixels
  0x8129, 0x0000, 0x9969, 0xC1CB, 0xB9AA, 0xC9EA, 0xC1EA, 0x0000, 0x0000, 0xDA29, 0xDA48, 0xDA68, 0xDA88, 0x0000, 0xD268, 0xE2A7,   // 0x00B0 (176) pixels
  0xBA46, 0x0000, 0xBA86, 0xEB68, 0xDB47, 0xDB68, 0xDBA8, 0x0000, 0xF46A, 0xF4AB, 0xF4EB, 0xF52C, 0xD4AA, 0xED4C, 0xED6C, 0x0840,   // 0x00C0 (192) pixels
  0x79D6, 0x70F4, 0xC4BA, 0xFFDF, 0xE65C, 0xA9D3, 0xB1B2, 0xA971, 0xB191, 0xB9D3, 0xC295, 0xCB96, 0xFFDF, 0xDCBA, 0xB0B3, 0xA974,   // 0x00D0 (208) pixels
  0x0000, 0x61D6, 0x0000, 0x0821, 0x7995, 0x0000, 0x0000, 0x9171, 0x9970, 0x0000, 0xA96F, 0x0000, 0x0000, 0x0000, 0x0000, 0xA98C,   // 0x00E0 (224) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xC9EA, 0x0000, 0xD229, 0x0000, 0x0000, 0x0820, 0xDA68, 0x0000, 0xD287, 0x0000,   // 0x00F0 (240) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE3E9, 0x0000, 0xF48A, 0x0000, 0x0000, 0xF50B, 0xDCCB, 0x0000, 0x0000, 0xDD0B,   // 0x0100 (256) pixels
  0x81D4, 0x8973, 0xFFFF, 0xCC98, 0x98EF, 0xA8CF, 0xB990, 0xC293, 0xC293, 0xC170, 0xD16F, 0xFFDF, 0xD16F, 0xFFBF, 0xC153, 0xB993,   // 0x0110 (272) pixels
  0x0020, 0x61B6, 0x0000, 0x0801, 0x79B5, 0x0000, 0x0000, 0x0000, 0x9971, 0x0000, 0xA14E, 0x914C, 0x992C, 0xB16E, 0x0800, 0xA16B,   // 0x0120 (288) pixels
  0x0000, 0x0000, 0x7927, 0xB9AA, 0xB1A9, 0xB9CA, 0xC9EA, 0x0000, 0xC208, 0x0000, 0x0000, 0x0000, 0xDA88, 0x0000, 0xCA46, 0x0000,   // 0x0130 (304) pixels
  0x0000, 0x0000, 0x9A25, 0xDB07, 0xF388, 0xF3E9, 0xE3C8, 0x0000, 0xF48A, 0x0000, 0x0000, 0xE4EB, 0xED2B, 0x0000, 0x0820, 0xDD0B,   // 0x0140 (320) pixels
  0x91B3, 0xA192, 0xFF9F, 0xC273, 0xB0AD, 0xCA51, 0xFFFF, 0xFFDF, 0xFFFF, 0xFF9E, 0xDB74, 0xD14E, 0xD12E, 0xFFDF, 0xCA13, 0xC193,   // 0x0150 (336) pixels
  0x0001, 0x59B5, 0x0000, 0x0001, 0x7194, 0x0000, 0x0000, 0x0000, 0x9970, 0x0020, 0x0000, 0x0000, 0x0001, 0xB18E, 0x0801, 0xA16B,   // 0x0160 (352) pixels
  0x0000, 0x0000, 0xA98A, 0x0000, 0x0000, 0x0000, 0xC9EA, 0x0000, 0xA9A8, 0x0000, 0x0000, 0x0800, 0xDA68, 0x0000, 0xD287, 0x0000,   // 0x0170 (368) pixels
  0x0000, 0x0000, 0xE307, 0x0000, 0x0000, 0x0820, 0xEBE9, 0x0000, 0xEC8A, 0x0000, 0x0000, 0xECCB, 0xDCCB, 0x0000, 0x0020, 0xDD0C,   // 0x0180 (384) pixels
  0xA1B2, 0xA96F, 0xF7BF, 0xCA90, 0xD1EF, 0xFF7F, 0xE475, 0xC88C, 0xC88C, 0xEC55, 0xFFBF, 0xC8CD, 0xDA11, 0xFFDF, 0xC991, 0xC972,   // 0x0190 (400) pixels
  0x0001, 0x59D5, 0x0001, 0x0000, 0x7193, 0x0000, 0x0000, 0x0000, 0xA171, 0x0000, 0xA96F, 0xA96F, 0xA16D, 0xA98D, 0x0820, 0xA16B,   // 0x01A0 (416) pixels
  0xB9AC, 0x0000, 0xA98A, 0xB9AB, 0xB1AA, 0xB9AA, 0xC9EA, 0x0000, 0x1020, 0xDA29, 0xD228, 0xD248, 0xDA68, 0x0000, 0xB226, 0x0000,   // 0x01B0 (432) pixels
  0x0000, 0x0000, 0xDB07, 0xEB68, 0xCB07, 0xD368, 0xDBC8, 0x0000, 0xCBC8, 0x0000, 0x0000, 0xE4CB, 0xE4CB, 0x0000, 0x0000, 0xDD0B,   // 0x01C0 (448) pixels
  0xB9CF, 0xC1CD, 0xFF9F, 0xE2EE, 0xDA4B, 0xFFFF, 0xE1EA, 0xD92A, 0xD90B, 0xD9CE, 0xFFBE, 0xD9AF, 0xDA10, 0xFFBE, 0xD170, 0xC971,   // 0x01D0 (464) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1021,   // 0x01E0 (480) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0820, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xDA68, 0x0000, 0x0000, 0x0000,   // 0x01F0 (496) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0200 (512) pixels
  0xCA6C, 0xD269, 0xF7BF, 0xEBAC, 0xE246, 0xFFDF, 0xF4B2, 0xE986, 0xE147, 0xF494, 0xFFDF, 0xD8EB, 0xE230, 0xFFFF, 0xD16F, 0xD191,   // 0x0210 (528) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0220 (544) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0820, 0x9186, 0xC208, 0xC207, 0xDA48, 0x0820, 0x0000, 0x0000, 0x0000,   // 0x0230 (560) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0240 (576) pixels
  0xDAEA, 0xE2C7, 0xFF9F, 0xF40B, 0xEAA3, 0xF46C, 0xFFFF, 0xFFDE, 0xFFDF, 0xFFDE, 0xEB0E, 0xE0CA, 0xE22F, 0xFFFF, 0xD94E, 0xD990,   // 0x0250 (592) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0260 (608) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1821, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0270 (624) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0280 (640) pixels
  0xE367, 0xEB24, 0xFFBF, 0xFCCB, 0xF321, 0xFB42, 0xFC07, 0xFD2E, 0xFD0F, 0xF2E8, 0xF1C6, 0xE108, 0xE311, 0xFFFF, 0xD90D, 0xD990,   // 0x0290 (656) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02A0 (672) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02B0 (688) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02C0 (704) pixels
  0xF3E7, 0xF3A2, 0xFDD0, 0xF7BF, 0xFD2B, 0xFC65, 0xFC24, 0xFB83, 0xFB23, 0xF2E5, 0xF2A7, 0xF2CB, 0xFFDE, 0xEC96, 0xD8CC, 0xD990,   // 0x02D0 (720) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02E0 (736) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02F0 (752) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0300 (768) pixels
  0xBBC7, 0xFCA5, 0xFCC4, 0xFEF6, 0xFFFF, 0xFFFE, 0xFFBD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFBD, 0xFF7D, 0xF515, 0xE12B, 0xD90D, 0xA9CD,   // 0x0310 (784) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0320 (800) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0330 (816) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0340 (832) pixels
  0x0000, 0xED07, 0xFDC9, 0xFDE8, 0xFE6D, 0xFE8E, 0xFE6E, 0xFE2E, 0xFDED, 0xFD6D, 0xFC8B, 0xF328, 0xE9C7, 0xE18A, 0xB0CB, 0x0000,   // 0x0350 (848) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0360 (864) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0370 (880) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0380 (896) pixels
  0x0000, 0x0000, 0xFED0, 0xFECF, 0xFECE, 0xFEAD, 0xFE8E, 0xFE4C, 0xFDEA, 0xED09, 0xD3E8, 0xC2E7, 0xBA47, 0xBB0F, 0x0000, 0x0000,   // 0x0390 (912) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03A0 (928) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03B0 (944) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03C0 (960) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03D0 (976) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03E0 (992) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03F0 (1008) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0400 (1024) pixels
};

uint16_t static yt_logo[] = {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0070 (112) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0080 (128) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x1000,   // 0x0090 (144) pixels
0x1000, 0x1000, 0x0800, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00A0 (160) pixels
0x3000, 0x8000, 0xA800, 0xB800, 0xB800, 0xC800, 0xC800, 0xD000, 0xD000, 0xD000, 0xD000, 0xC800, 0xC800, 0xB800, 0xB800, 0xA800,   // 0x00B0 (176) pixels
0x8000, 0x3000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2800, 0xD000, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x00C0 (192) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xD000, 0x2800, 0x0000, 0x0000, 0x0000,   // 0x00D0 (208) pixels
0x0000, 0x0000, 0x0000, 0x7800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x00E0 (224) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9800, 0xF800, 0xF800,   // 0x00F0 (240) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0100 (256) pixels
0x9800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF8C3, 0xFBEF,   // 0x0110 (272) pixels
0xF965, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xA800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0120 (288) pixels
0x0000, 0xA800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF8E3, 0xFF1C, 0xFF1C, 0xFBEF, 0xF8C3, 0xF800, 0xF800, 0xF800,   // 0x0130 (304) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xA800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0140 (320) pixels
0xF800, 0xF800, 0xF8E3, 0xFF1C, 0xFFFF, 0xFFFF, 0xFE79, 0xFAAA, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xB800, 0x0000,   // 0x0150 (336) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF8E3, 0xFF1C, 0xFFFF, 0xFFFF,   // 0x0160 (352) pixels
0xFE79, 0xFA8A, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xB800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB800,   // 0x0170 (368) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF8E3, 0xFF1C, 0xFF1C, 0xFBEF, 0xF8C3, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0180 (384) pixels
0xF800, 0xF800, 0xB800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0190 (400) pixels
0xF8C3, 0xFBEF, 0xF965, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xA800, 0x0000, 0x0000, 0x0000,   // 0x01A0 (416) pixels
0x0000, 0x0000, 0x0000, 0x9800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x01B0 (432) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x9800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0xF800, 0xF800,   // 0x01C0 (448) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x01D0 (464) pixels
0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2800, 0xD000, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x01E0 (480) pixels
0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xD000, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01F0 (496) pixels
0x0000, 0x0000, 0x2800, 0x8000, 0xA800, 0xB800, 0xB800, 0xC800, 0xC800, 0xD000, 0xD000, 0xD000, 0xD000, 0xC800, 0xC800, 0xB800,   // 0x0200 (512) pixels
0xB800, 0xA800, 0x8000, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0210 (528) pixels
0x0000, 0x0800, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0220 (544) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0230 (560) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0240 (576) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0250 (592) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0260 (608) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0270 (624) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0280 (640) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0290 (656) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02A0 (672) pixels
}; 

uint16_t static yt_logo2[] = {
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x2000, 0x3000, 0x4000, 0x4000, 0x4800, 0x4800, 0x4000, 0x4000, 0x3000, 0x2000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
0x0000, 0x0000, 0x6800, 0xE000, 0xF000, 0xF000, 0xF800, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xE000, 0x6800, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x1000, 0xC800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xC800, 0x1000, 0x0000,   // 0x0060 (96) pixels
0x0000, 0x1800, 0xD800, 0xF800, 0xF800, 0xF800, 0xF965, 0xFB0C, 0xF861, 0xF800, 0xF800, 0xF800, 0xF800, 0xD800, 0x1800, 0x0000,   // 0x0070 (112) pixels
0x0000, 0x2000, 0xE000, 0xF800, 0xF800, 0xF800, 0xFA08, 0xFFBE, 0xFDF7, 0xFA08, 0xF800, 0xF800, 0xF800, 0xE000, 0x2000, 0x0000,   // 0x0080 (128) pixels
0x0000, 0x2000, 0xE000, 0xF800, 0xF800, 0xF800, 0xFA08, 0xFFBE, 0xFDF7, 0xFA08, 0xF800, 0xF800, 0xF800, 0xE000, 0x2000, 0x0000,   // 0x0090 (144) pixels
0x0000, 0x1800, 0xD800, 0xF800, 0xF800, 0xF800, 0xF965, 0xFB0C, 0xF861, 0xF800, 0xF800, 0xF800, 0xF800, 0xD800, 0x1800, 0x0000,   // 0x00A0 (160) pixels
0x0000, 0x1000, 0xC800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xC800, 0x1000, 0x0000,   // 0x00B0 (176) pixels
0x0000, 0x0000, 0x6800, 0xE000, 0xF000, 0xF000, 0xF800, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xE000, 0x6800, 0x0000, 0x0000,   // 0x00C0 (192) pixels
0x0000, 0x0000, 0x0000, 0x2000, 0x3000, 0x4000, 0x4000, 0x4800, 0x4800, 0x4000, 0x4000, 0x3000, 0x2000, 0x0000, 0x0000, 0x0000,   // 0x00D0 (208) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00E0 (224) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00F0 (240) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
};

void drawInstax(int x, int y)
{
  int counter = 0;
  for (int yy = 0; yy < 16; yy++)
  {
    for (int xx = 0; xx < 64; xx++)
    {
      display.drawPixel(xx + x , yy + y, Insta_logox[counter]);
      counter++;
    }
  }
}

void drawInsta(int x, int y)
{
  int counter = 0;
  for (int yy = 0; yy < 16; yy++)
  {
    for (int xx = 0; xx < 16; xx++)
    {
      display.drawPixel(xx + x , yy + y, Insta_logo[counter]);
      counter++;
    }
  }
}

void yt(int x, int y)
{
  int counter = 0;
  for (int yy = 0; yy < 26; yy++)
  {
    for (int xx = 0; xx < 26; xx++)
    {
      display.drawPixel(xx + x , yy + y, yt_logo[counter]);
      counter++;
    }
  }
}

#ifdef ESP8266
// ISR for display refresh
void display_updater()
{
  display.display(display_draw_time);
}
#endif

#ifdef ESP32
void IRAM_ATTR display_updater(){
  // Increment the counter and set the time of ISR
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}
#endif


void display_update_enable(bool is_enable)
{

#ifdef ESP8266
  if (is_enable)
    display_ticker.attach(0.004, display_updater);
  else
    display_ticker.detach();
#endif

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 4000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}



void setup() {

 Serial.begin(115200);
  // Define your display layout here, e.g. 1/8 step, and optional SPI pins begin(row_pattern, CLK, MOSI, MISO, SS)
  display.begin(32);
  //display.begin(8, 14, 13, 12, 4);

  // Define multiplex implemention here {BINARY, STRAIGHT} (default is BINARY)
  //display.setMuxPattern(BINARY);

  // Set the multiplex pattern {LINE, ZIGZAG,ZZAGG, ZAGGIZ, WZAGZIG, VZAG, ZAGZIG} (default is LINE)
  //display.setScanPattern(LINE);

  // Rotate display
  //display.setRotate(true);

  // Flip display
  //display.setFlip(true);

  // Control the minimum color values that result in an active pixel
  //display.setColorOffset(5, 5,5);

  // Set the multiplex implemention {BINARY, STRAIGHT} (default is BINARY)
  //display.setMuxPattern(BINARY);

  // Set the color order {RRGGBB, RRBBGG, GGRRBB, GGBBRR, BBRRGG, BBGGRR} (default is RRGGBB)
  //display.setColorOrder(RRGGBB);

  // Set the time in microseconds that we pause after selecting each mux channel
  // (May help if some rows are missing / the mux chip is too slow)
  //display.setMuxDelay(0,1,0,0,0);

  // Set the number of panels that make up the display area width (default is 1)
  //display.setPanelsWidth(2);

  // Set the brightness of the panels (default is 255)
  //display.setBrightness(50);

  // Set driver chip type
  //display.setDriverChip(FM6124);

  display.clearDisplay();
  display.setTextColor(myCYAN);
  display.setCursor(2,0);
  display.print("Pixel");
  display.setTextColor(myMAGENTA);
  display.setCursor(2,8);
  display.print("Time");
  display_update_enable(true);

  delay(3000);

}
union single_double{
  uint8_t two[2];
  uint16_t one;
} this_single_double;

// This draws the weather icons
void draw_weather_icon (uint8_t icon)
{
  if (icon>10)
  icon=10;
  for (int yy=0; yy<10;yy++)
  {
    for (int xx=0; xx<10;xx++)
    {
      uint16_t byte_pos=(xx+icon*10)*2+yy*220;
      this_single_double.two[1]=weather_icons[byte_pos];
      this_single_double.two[0]=weather_icons[byte_pos+1];
      display.drawPixel(1+xx,yy,this_single_double.one);
    }
  }
}

unsigned long last_draw=0;
void scroll_text(uint8_t ypos, unsigned long scroll_delay, String text, uint8_t colorR, uint8_t colorG, uint8_t colorB)
{
    uint16_t text_length = text.length();
    display.setTextWrap(false);  // we don't wrap text so it scrolls nicely
    display.setTextSize(1);
    display.setRotation(0);
    display.setTextColor(display.color565(colorR,colorG,colorB));

    // Asuming 5 pixel average character width
    for (int xpos=matrix_width; xpos>-(matrix_width+text_length*5); xpos--)
    {
      display.setTextColor(display.color565(colorR,colorG,colorB));
      display.clearDisplay();
      display.setCursor(xpos,ypos);
      display.println(text);
      delay(scroll_delay);
      yield();

      // This might smooth the transition a bit if we go slow
      // display.setTextColor(display.color565(colorR/4,colorG/4,colorB/4));
      // display.setCursor(xpos-1,ypos);
      // display.println(text);

      delay(scroll_delay/5);
      yield();

    }
}

uint8_t icon_index=0;
void loop() {
//  scroll_text(1,50,"Welcome to PxMatrix!",96,96,250);
  
  display.clearDisplay();
  display.setCursor(16,2);
  display.print("Techy");
  display.setCursor(10,12);
  display.print("Marathi");
//  drawInstax(0,20);
yt(4,30);

  drawInsta(40,36);
 
  
  display.setCursor(8,55);
  display.print("27K");
  display.setCursor(37,55);
  display.print("458K");
  delay(10000);
//  draw_weather_icon(icon_index);
//  icon_index++;
//  if (icon_index>10)
//    icon_index=0;
//
//  for (int xx=0; xx<16;xx++)
//  {
//    display.drawLine(xx+16,0,xx+16,5,display.color565(xx*16,0,0));
//    display.drawLine(xx+16,6,xx+16,10,display.color565(0,xx*16,0));
//    display.drawLine(xx+16,11,xx+16,15,display.color565(0,0,xx*16));
//  }
//  delay(1000);
//  for (uint8_t dimm=255; dimm>0; dimm--)
//  {
//    display.setBrightness(dimm);
//    delay(5);
//  }
//  for (uint8_t dimm=0; dimm<255; dimm++)
//  {
//    display.setBrightness(dimm);
//    delay(5);
//  }

}
